global !p
def ruby_init_var(varname):
  return f'@{varname} = {varname}'
endglobal

global !p
def ruby_init_vars(snip, t, indent=1):
  first, *rest = t.translate({ ord(':'): None }).split(', ')
  snip.rv = ruby_init_var(first)
  snip >> indent
  for varname in rest:
    snip += ruby_init_var(varname)
endglobal

snippet fsl
# frozen_string_literal: true
endsnippet

snippet tt
# typed: true
endsnippet

snippet r
require '${1}'
endsnippet

snippet c "a class" s
class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
  def initialize
    ${3}
  end
end
endsnippet

snippet ci "a class with constructor"
class ${1:`!p snip.rv = snip.basename.title().replace('_', '')`}
  def initialize(${2})
    `!p ruby_init_vars(snip, t[2], indent=2)`
  end
end
endsnippet

snippet d "a method definition"
def ${1}
  ${2:puts 'Hello, World'}
end
endsnippet

snippet da
def ${1}(${2})
  ${3}
end
endsnippet

snippet dinit
def initialize(${1})
  `!p ruby_init_vars(snip, t[1])`
end
endsnippet

snippet argf
ARGF.readlines.map(&:chomp)
endsnippet

snippet sargf
ARGF.each_line do |${1:line}|
${2:puts $1}
end
endsnippet

snippet igemfile
require 'bundler/inline'

gemfile do
source 'https://rubygems.org'
gem '${1:nokogiri}', '~> ${2}'
end

puts 'Inline Dependencies Loaded!'
endsnippet

snippet testcase
class Test$1 < Test::Unit::TestCase
  def setup
    $2
  end

  def test_${3:something}
    $4
  end
end
endsnippet

snippet test
def test_${1:something}
$2
end
endsnippet

snippet doc "a heredoc" s
<<~${1:TEXT}
  $2
$1
endsnippet

snippet titelize
${1:hi}
${1/\w+\s*/\u$0/g}
endsnippet

snippet arg
${1:thing}: $1,
endsnippet

snippet var
@${1:thing} = $1
endsnippet

snippet multiline "split an arglist over multiple lines"
`!p
text = snip.v.text[0: -2]
method, arglist = text.split('(')
args = arglist.split(r",")

snip.rv = f"{method.lstrip()}("
snip >> 1

for arg in args:
    snip += f"{arg.lstrip()},"

snip.reset_indent()
snip += ')'
`
endsnippet

snippet trace
puts "--> #{File.basename(__FILE__)}:#{__LINE__} ${1:thing} = #{$1}"
endsnippet

snippet p
puts "--> ${1:thing} = #{$1}"
endsnippet

snippet .tap "tap" i
.tap { |$1| puts "--> ${1:thing} => #{$1}"
endsnippet

snippet br
binding.break
endsnippet
