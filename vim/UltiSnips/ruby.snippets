global !p
def ruby_init_var(varname):
  return f'@{varname} = {varname}'
endglobal

global !p
def ruby_init_vars(snip, t):
  first, *rest = t.split(', ')
  snip.rv = ruby_init_var(first)
  snip >> 2
  for varname in rest:
    snip += ruby_init_var(varname)
endglobal

snippet fsl
# frozen_string_literal: true
endsnippet

snippet r
require '${1}'
endsnippet

snippet c
# ${2: Documentation}
class ${1}
  def initialize
    ${3}
  end
end
endsnippet

snippet ci
# ${3: Documentation}
class ${1}
  def initialize(${2})
    `!p ruby_init_vars(snip, t[2])`
  end
end
endsnippet

snippet d
def ${1}
  ${2:puts 'Hello, World'}
end
endsnippet

snippet da
def ${1}(${2})
  ${3}
end
endsnippet

snippet dinit
def initialize(${1})
  `!p ruby_init_vars(snip, t[1])`
end
endsnippet

snippet argf
ARGF.readlines.map(&:chomp)
endsnippet

snippet sargf
ARGF.each_line do |${1:line}|
${2:puts $1}
end
endsnippet

snippet igemfile
require 'bundler/inline'

gemfile do
source 'https://rubygems.org'
gem '${1:nokogiri}', '~> ${2}'
end

puts 'Inline Dependencies Loaded!'
endsnippet

snippet testcase
class Test$1 < Test::Unit::TestCase
def setup
  $2
end

def test_${3:something}
  $4
end
end
endsnippet

snippet test
def test_${1:something}
$2
end
endsnippet
